/* tslint:disable */
/* eslint-disable */
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.6.2.0 (NJsonSchema v10.1.23.0 (Newtonsoft.Json v12.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------
// ReSharper disable InconsistentNaming

import { mergeMap as _observableMergeMap, catchError as _observableCatch } from 'rxjs/operators';
import { Observable, throwError as _observableThrow, of as _observableOf } from 'rxjs';
import { Injectable, Inject, Optional, InjectionToken } from '@angular/core';
import { HttpClient, HttpHeaders, HttpResponse, HttpResponseBase } from '@angular/common/http';

export const API_BASE_URL = new InjectionToken<string>('API_BASE_URL');

export interface IBatchesClient {
    create(batch: BatchDto): Observable<number>;
    get(): Observable<BatchListVm>;
    sample(sample: SampleDto): Observable<number>;
    get2(id: number): Observable<BatchDto>;
    search(query: SearchBatchQuery): Observable<BatchListVm>;
}

@Injectable({
    providedIn: 'root'
})
export class BatchesClient implements IBatchesClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    create(batch: BatchDto): Observable<number> {
        let url_ = this.baseUrl + "/api/Batches";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(batch);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreate(<any>response_);
                } catch (e) {
                    return <Observable<number>><any>_observableThrow(e);
                }
            } else
                return <Observable<number>><any>_observableThrow(response_);
        }));
    }

    protected processCreate(response: HttpResponseBase): Observable<number> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<number>(<any>null);
    }

    get(): Observable<BatchListVm> {
        let url_ = this.baseUrl + "/api/Batches";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGet(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGet(<any>response_);
                } catch (e) {
                    return <Observable<BatchListVm>><any>_observableThrow(e);
                }
            } else
                return <Observable<BatchListVm>><any>_observableThrow(response_);
        }));
    }

    protected processGet(response: HttpResponseBase): Observable<BatchListVm> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = BatchListVm.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<BatchListVm>(<any>null);
    }

    sample(sample: SampleDto): Observable<number> {
        let url_ = this.baseUrl + "/api/Batches/Sample";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(sample);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processSample(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processSample(<any>response_);
                } catch (e) {
                    return <Observable<number>><any>_observableThrow(e);
                }
            } else
                return <Observable<number>><any>_observableThrow(response_);
        }));
    }

    protected processSample(response: HttpResponseBase): Observable<number> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<number>(<any>null);
    }

    get2(id: number): Observable<BatchDto> {
        let url_ = this.baseUrl + "/api/Batches/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGet2(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGet2(<any>response_);
                } catch (e) {
                    return <Observable<BatchDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<BatchDto>><any>_observableThrow(response_);
        }));
    }

    protected processGet2(response: HttpResponseBase): Observable<BatchDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = BatchDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<BatchDto>(<any>null);
    }

    search(query: SearchBatchQuery): Observable<BatchListVm> {
        let url_ = this.baseUrl + "/api/Batches/Search";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(query);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processSearch(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processSearch(<any>response_);
                } catch (e) {
                    return <Observable<BatchListVm>><any>_observableThrow(e);
                }
            } else
                return <Observable<BatchListVm>><any>_observableThrow(response_);
        }));
    }

    protected processSearch(response: HttpResponseBase): Observable<BatchListVm> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = BatchListVm.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<BatchListVm>(<any>null);
    }
}

export interface IIngredientsClient {
    create(ingredient: IngredientDto): Observable<number>;
    get(): Observable<IngredientsVm>;
    search(searchTerm: string | null | undefined): Observable<IngredientsVm>;
}

@Injectable({
    providedIn: 'root'
})
export class IngredientsClient implements IIngredientsClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    create(ingredient: IngredientDto): Observable<number> {
        let url_ = this.baseUrl + "/api/Ingredients";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(ingredient);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreate(<any>response_);
                } catch (e) {
                    return <Observable<number>><any>_observableThrow(e);
                }
            } else
                return <Observable<number>><any>_observableThrow(response_);
        }));
    }

    protected processCreate(response: HttpResponseBase): Observable<number> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<number>(<any>null);
    }

    get(): Observable<IngredientsVm> {
        let url_ = this.baseUrl + "/api/Ingredients";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGet(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGet(<any>response_);
                } catch (e) {
                    return <Observable<IngredientsVm>><any>_observableThrow(e);
                }
            } else
                return <Observable<IngredientsVm>><any>_observableThrow(response_);
        }));
    }

    protected processGet(response: HttpResponseBase): Observable<IngredientsVm> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = IngredientsVm.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<IngredientsVm>(<any>null);
    }

    search(searchTerm: string | null | undefined): Observable<IngredientsVm> {
        let url_ = this.baseUrl + "/api/Ingredients/Search?";
        if (searchTerm !== undefined && searchTerm !== null)
            url_ += "searchTerm=" + encodeURIComponent("" + searchTerm) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processSearch(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processSearch(<any>response_);
                } catch (e) {
                    return <Observable<IngredientsVm>><any>_observableThrow(e);
                }
            } else
                return <Observable<IngredientsVm>><any>_observableThrow(response_);
        }));
    }

    protected processSearch(response: HttpResponseBase): Observable<IngredientsVm> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = IngredientsVm.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<IngredientsVm>(<any>null);
    }
}

export interface IRecipesClient {
    create(recipe: RecipeDto): Observable<number>;
    get(id: number): Observable<RecipeDto>;
    search(query: SearchRecipeQuery): Observable<RecipeSearchResultsVm>;
}

@Injectable({
    providedIn: 'root'
})
export class RecipesClient implements IRecipesClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    create(recipe: RecipeDto): Observable<number> {
        let url_ = this.baseUrl + "/api/Recipes";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(recipe);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreate(<any>response_);
                } catch (e) {
                    return <Observable<number>><any>_observableThrow(e);
                }
            } else
                return <Observable<number>><any>_observableThrow(response_);
        }));
    }

    protected processCreate(response: HttpResponseBase): Observable<number> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<number>(<any>null);
    }

    get(id: number): Observable<RecipeDto> {
        let url_ = this.baseUrl + "/api/Recipes/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGet(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGet(<any>response_);
                } catch (e) {
                    return <Observable<RecipeDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<RecipeDto>><any>_observableThrow(response_);
        }));
    }

    protected processGet(response: HttpResponseBase): Observable<RecipeDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = RecipeDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<RecipeDto>(<any>null);
    }

    search(query: SearchRecipeQuery): Observable<RecipeSearchResultsVm> {
        let url_ = this.baseUrl + "/api/Recipes/Search";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(query);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processSearch(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processSearch(<any>response_);
                } catch (e) {
                    return <Observable<RecipeSearchResultsVm>><any>_observableThrow(e);
                }
            } else
                return <Observable<RecipeSearchResultsVm>><any>_observableThrow(response_);
        }));
    }

    protected processSearch(response: HttpResponseBase): Observable<RecipeSearchResultsVm> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = RecipeSearchResultsVm.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<RecipeSearchResultsVm>(<any>null);
    }
}

export class BatchDto implements IBatchDto {
    id?: number | undefined;
    recipeId?: number;
    brewDay?: Date;
    bottleOrKegDate?: Date | undefined;
    pitchTemp?: number;
    og?: number;
    fg?: number | undefined;
    hopAdditions?: HopAdditionDto[] | undefined;
    notes?: string | undefined;
    servingDate?: Date | undefined;
    samples?: SampleDto[] | undefined;

    constructor(data?: IBatchDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.recipeId = _data["recipeId"];
            this.brewDay = _data["brewDay"] ? new Date(_data["brewDay"].toString()) : <any>undefined;
            this.bottleOrKegDate = _data["bottleOrKegDate"] ? new Date(_data["bottleOrKegDate"].toString()) : <any>undefined;
            this.pitchTemp = _data["pitchTemp"];
            this.og = _data["og"];
            this.fg = _data["fg"];
            if (Array.isArray(_data["hopAdditions"])) {
                this.hopAdditions = [] as any;
                for (let item of _data["hopAdditions"])
                    this.hopAdditions!.push(HopAdditionDto.fromJS(item));
            }
            this.notes = _data["notes"];
            this.servingDate = _data["servingDate"] ? new Date(_data["servingDate"].toString()) : <any>undefined;
            if (Array.isArray(_data["samples"])) {
                this.samples = [] as any;
                for (let item of _data["samples"])
                    this.samples!.push(SampleDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): BatchDto {
        data = typeof data === 'object' ? data : {};
        let result = new BatchDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["recipeId"] = this.recipeId;
        data["brewDay"] = this.brewDay ? this.brewDay.toISOString() : <any>undefined;
        data["bottleOrKegDate"] = this.bottleOrKegDate ? this.bottleOrKegDate.toISOString() : <any>undefined;
        data["pitchTemp"] = this.pitchTemp;
        data["og"] = this.og;
        data["fg"] = this.fg;
        if (Array.isArray(this.hopAdditions)) {
            data["hopAdditions"] = [];
            for (let item of this.hopAdditions)
                data["hopAdditions"].push(item.toJSON());
        }
        data["notes"] = this.notes;
        data["servingDate"] = this.servingDate ? this.servingDate.toISOString() : <any>undefined;
        if (Array.isArray(this.samples)) {
            data["samples"] = [];
            for (let item of this.samples)
                data["samples"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IBatchDto {
    id?: number | undefined;
    recipeId?: number;
    brewDay?: Date;
    bottleOrKegDate?: Date | undefined;
    pitchTemp?: number;
    og?: number;
    fg?: number | undefined;
    hopAdditions?: HopAdditionDto[] | undefined;
    notes?: string | undefined;
    servingDate?: Date | undefined;
    samples?: SampleDto[] | undefined;
}

export class HopAdditionDto implements IHopAdditionDto {
    ingredientName?: string | undefined;
    ingredientId?: number;
    minutes?: number | undefined;
    dateAdded?: Date | undefined;
    temperature?: number | undefined;

    constructor(data?: IHopAdditionDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.ingredientName = _data["ingredientName"];
            this.ingredientId = _data["ingredientId"];
            this.minutes = _data["minutes"];
            this.dateAdded = _data["dateAdded"] ? new Date(_data["dateAdded"].toString()) : <any>undefined;
            this.temperature = _data["temperature"];
        }
    }

    static fromJS(data: any): HopAdditionDto {
        data = typeof data === 'object' ? data : {};
        let result = new HopAdditionDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["ingredientName"] = this.ingredientName;
        data["ingredientId"] = this.ingredientId;
        data["minutes"] = this.minutes;
        data["dateAdded"] = this.dateAdded ? this.dateAdded.toISOString() : <any>undefined;
        data["temperature"] = this.temperature;
        return data; 
    }
}

export interface IHopAdditionDto {
    ingredientName?: string | undefined;
    ingredientId?: number;
    minutes?: number | undefined;
    dateAdded?: Date | undefined;
    temperature?: number | undefined;
}

export class SampleDto implements ISampleDto {
    batchId?: number;
    sampleDate?: Date;
    gravity?: number | undefined;
    temperature?: number | undefined;

    constructor(data?: ISampleDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.batchId = _data["batchId"];
            this.sampleDate = _data["sampleDate"] ? new Date(_data["sampleDate"].toString()) : <any>undefined;
            this.gravity = _data["gravity"];
            this.temperature = _data["temperature"];
        }
    }

    static fromJS(data: any): SampleDto {
        data = typeof data === 'object' ? data : {};
        let result = new SampleDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["batchId"] = this.batchId;
        data["sampleDate"] = this.sampleDate ? this.sampleDate.toISOString() : <any>undefined;
        data["gravity"] = this.gravity;
        data["temperature"] = this.temperature;
        return data; 
    }
}

export interface ISampleDto {
    batchId?: number;
    sampleDate?: Date;
    gravity?: number | undefined;
    temperature?: number | undefined;
}

export class BatchListVm implements IBatchListVm {
    batches?: BatchDto[] | undefined;

    constructor(data?: IBatchListVm) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["batches"])) {
                this.batches = [] as any;
                for (let item of _data["batches"])
                    this.batches!.push(BatchDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): BatchListVm {
        data = typeof data === 'object' ? data : {};
        let result = new BatchListVm();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.batches)) {
            data["batches"] = [];
            for (let item of this.batches)
                data["batches"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IBatchListVm {
    batches?: BatchDto[] | undefined;
}

export class SearchBatchQuery implements ISearchBatchQuery {
    recipeName?: string | undefined;
    brewedFrom?: Date | undefined;
    brewedTo?: Date | undefined;
    bottledOrKeggedOnFrom?: Date | undefined;
    bottledOrKeggedOnTo?: Date | undefined;

    constructor(data?: ISearchBatchQuery) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.recipeName = _data["recipeName"];
            this.brewedFrom = _data["brewedFrom"] ? new Date(_data["brewedFrom"].toString()) : <any>undefined;
            this.brewedTo = _data["brewedTo"] ? new Date(_data["brewedTo"].toString()) : <any>undefined;
            this.bottledOrKeggedOnFrom = _data["bottledOrKeggedOnFrom"] ? new Date(_data["bottledOrKeggedOnFrom"].toString()) : <any>undefined;
            this.bottledOrKeggedOnTo = _data["bottledOrKeggedOnTo"] ? new Date(_data["bottledOrKeggedOnTo"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): SearchBatchQuery {
        data = typeof data === 'object' ? data : {};
        let result = new SearchBatchQuery();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["recipeName"] = this.recipeName;
        data["brewedFrom"] = this.brewedFrom ? this.brewedFrom.toISOString() : <any>undefined;
        data["brewedTo"] = this.brewedTo ? this.brewedTo.toISOString() : <any>undefined;
        data["bottledOrKeggedOnFrom"] = this.bottledOrKeggedOnFrom ? this.bottledOrKeggedOnFrom.toISOString() : <any>undefined;
        data["bottledOrKeggedOnTo"] = this.bottledOrKeggedOnTo ? this.bottledOrKeggedOnTo.toISOString() : <any>undefined;
        return data; 
    }
}

export interface ISearchBatchQuery {
    recipeName?: string | undefined;
    brewedFrom?: Date | undefined;
    brewedTo?: Date | undefined;
    bottledOrKeggedOnFrom?: Date | undefined;
    bottledOrKeggedOnTo?: Date | undefined;
}

export class IngredientDto implements IIngredientDto {
    id?: number | undefined;
    name?: string | undefined;
    categoryName?: string | undefined;
    categoryId?: number | undefined;

    constructor(data?: IIngredientDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.categoryName = _data["categoryName"];
            this.categoryId = _data["categoryId"];
        }
    }

    static fromJS(data: any): IngredientDto {
        data = typeof data === 'object' ? data : {};
        let result = new IngredientDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["categoryName"] = this.categoryName;
        data["categoryId"] = this.categoryId;
        return data; 
    }
}

export interface IIngredientDto {
    id?: number | undefined;
    name?: string | undefined;
    categoryName?: string | undefined;
    categoryId?: number | undefined;
}

export class IngredientsVm implements IIngredientsVm {
    ingredients?: IngredientDto[] | undefined;

    constructor(data?: IIngredientsVm) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["ingredients"])) {
                this.ingredients = [] as any;
                for (let item of _data["ingredients"])
                    this.ingredients!.push(IngredientDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): IngredientsVm {
        data = typeof data === 'object' ? data : {};
        let result = new IngredientsVm();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.ingredients)) {
            data["ingredients"] = [];
            for (let item of this.ingredients)
                data["ingredients"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IIngredientsVm {
    ingredients?: IngredientDto[] | undefined;
}

export class RecipeDto implements IRecipeDto {
    name?: string | undefined;
    style?: string | undefined;
    ingredients?: RecipeIngredientDto[] | undefined;
    massUnits?: MassUnit;
    temperatureUnits?: TemperatureUnit;
    liquidUnits?: LiquidVolumeUnit;
    notes?: string | undefined;

    constructor(data?: IRecipeDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.style = _data["style"];
            if (Array.isArray(_data["ingredients"])) {
                this.ingredients = [] as any;
                for (let item of _data["ingredients"])
                    this.ingredients!.push(RecipeIngredientDto.fromJS(item));
            }
            this.massUnits = _data["massUnits"];
            this.temperatureUnits = _data["temperatureUnits"];
            this.liquidUnits = _data["liquidUnits"];
            this.notes = _data["notes"];
        }
    }

    static fromJS(data: any): RecipeDto {
        data = typeof data === 'object' ? data : {};
        let result = new RecipeDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["style"] = this.style;
        if (Array.isArray(this.ingredients)) {
            data["ingredients"] = [];
            for (let item of this.ingredients)
                data["ingredients"].push(item.toJSON());
        }
        data["massUnits"] = this.massUnits;
        data["temperatureUnits"] = this.temperatureUnits;
        data["liquidUnits"] = this.liquidUnits;
        data["notes"] = this.notes;
        return data; 
    }
}

export interface IRecipeDto {
    name?: string | undefined;
    style?: string | undefined;
    ingredients?: RecipeIngredientDto[] | undefined;
    massUnits?: MassUnit;
    temperatureUnits?: TemperatureUnit;
    liquidUnits?: LiquidVolumeUnit;
    notes?: string | undefined;
}

export class RecipeIngredientDto implements IRecipeIngredientDto {
    ingredientId?: number;
    ingredientName?: string | undefined;
    quantity?: number;

    constructor(data?: IRecipeIngredientDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.ingredientId = _data["ingredientId"];
            this.ingredientName = _data["ingredientName"];
            this.quantity = _data["quantity"];
        }
    }

    static fromJS(data: any): RecipeIngredientDto {
        data = typeof data === 'object' ? data : {};
        let result = new RecipeIngredientDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["ingredientId"] = this.ingredientId;
        data["ingredientName"] = this.ingredientName;
        data["quantity"] = this.quantity;
        return data; 
    }
}

export interface IRecipeIngredientDto {
    ingredientId?: number;
    ingredientName?: string | undefined;
    quantity?: number;
}

export enum MassUnit {
    Kg = 0,
    G = 1,
    Oz = 2,
}

export enum TemperatureUnit {
    DegreesCelsius = 0,
    DegreesFarenheit = 1,
}

export enum LiquidVolumeUnit {
    Litres = 0,
    Gallons = 1,
    Oz = 2,
}

export class RecipeSearchResultsVm implements IRecipeSearchResultsVm {
    recipes?: RecipeDto[] | undefined;

    constructor(data?: IRecipeSearchResultsVm) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["recipes"])) {
                this.recipes = [] as any;
                for (let item of _data["recipes"])
                    this.recipes!.push(RecipeDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): RecipeSearchResultsVm {
        data = typeof data === 'object' ? data : {};
        let result = new RecipeSearchResultsVm();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.recipes)) {
            data["recipes"] = [];
            for (let item of this.recipes)
                data["recipes"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IRecipeSearchResultsVm {
    recipes?: RecipeDto[] | undefined;
}

export class SearchRecipeQuery implements ISearchRecipeQuery {
    name?: string | undefined;
    style?: string | undefined;

    constructor(data?: ISearchRecipeQuery) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.style = _data["style"];
        }
    }

    static fromJS(data: any): SearchRecipeQuery {
        data = typeof data === 'object' ? data : {};
        let result = new SearchRecipeQuery();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["style"] = this.style;
        return data; 
    }
}

export interface ISearchRecipeQuery {
    name?: string | undefined;
    style?: string | undefined;
}

export class ApiException extends Error {
    message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): Observable<any> {
    if (result !== null && result !== undefined)
        return _observableThrow(result);
    else
        return _observableThrow(new ApiException(message, status, response, headers, null));
}

function blobToText(blob: any): Observable<string> {
    return new Observable<string>((observer: any) => {
        if (!blob) {
            observer.next("");
            observer.complete();
        } else {
            let reader = new FileReader();
            reader.onload = event => {
                observer.next((<any>event.target).result);
                observer.complete();
            };
            reader.readAsText(blob);
        }
    });
}