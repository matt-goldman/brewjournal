# Demo Snippets for Xamarin Hack Day 2020

TAB: FodyWeavers.xml

- PropertyChanged config

<?xml version="1.0" encoding="utf-8"?>
<Weavers xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="FodyWeavers.xsd">
  <PropertyChanged />
</Weavers> 

TAB: Constants

- Initialise

private string _apiUri;
public string ApiUri
{
    get
    {
        return _apiUri;
    }
}

- Constructor

public Constants()
{
    _apiUri = ""// TODO: Paste ngrok url
}

TAB: App

- Add Constants

public static Constants Constants { get; set; }

- Initialise

Constants = new Constants();

- Reformat colours

<Color x:Key="NavigationPrimary">#ffb900</Color>
<Color x:Key="BorderColour">#b38a19</Color>

TAB: Main Page

- Tabs to bottom

xmlns:android="clr-namespace:Xamarin.Forms.PlatformConfiguration.AndroidSpecific;assembly=Xamarin.Forms.Core"
Title="BrewJournal"
android:TabbedPage.ToolbarPlacement="Bottom"
BarBackgroundColor="#ffb900"
BarTextColor="White"
android:TabbedPage.BarItemColor="#66FFFFFF"
android:TabbedPage.BarSelectedItemColor="White"

TAB: Base Service

- Props

public static HttpClient httpClient { get; set; }
public static string apiUri;

- Constructor

public BaseService()
{
    httpClient = new HttpClient();
    apiUri = App.Constants.ApiUri;
}

TAB: Recipes Service

- Recipes Client

private readonly RecipesClient client;

public RecipesService()
{
    client = new RecipesClient(apiUri, httpClient);
}

- Get Method

public async Task<RecipeDto> GetAsync(int id)
{
    return await client.GetAsync(id);
}

- Search

public async Task<ICollection<RecipeDto>> SearchAsync(string searchterm)
{
    ICollection<RecipeDto> recipes = new ObservableCollection<RecipeDto>();

    SearchRecipeQuery query = new SearchRecipeQuery();
    query.Name = searchterm;
    var vm = await client.SearchAsync(query);

    vm.Recipes.ForEach(r =>
    {
        recipes.Add(r);
    });

    return recipes;
}

- Create

public async Task<int> CreateAsync(RecipeDto recipe)
{
    return await client.CreateAsync(recipe);
}

TAB: Base View Model

- Add Navigation

public INavigation Navigation { get; set; }

TAB: Recipes View Model

- Recipes Service

private readonly RecipesService service;

- Constructor  

public RecipesViewModel()
{
    Service = new RecipesService();
}

- Props

public string SearchTerm { get; set; }

public RecipeDto SelectedRecipe { get; set; } = new RecipeDto();

public ICollection<RecipeDto> Recipes { get; set; } = new ObservableCollection<RecipeDto>();

public ICommand SearchRecipeCommand { get; set; }
public ICommand OpenRecipeDetailsCommand { get; set; }

- Methods

public async Task SearchRecipes()
{
    Recipes.Clear();
    Recipes = await client.SearchAsync(SearchTerm);
}

- Initialise

SearchRecipeCommand = new Command(async () => await SearchRecipes());

TAB: Recipes Page

- Page Content

<StackLayout>
    <StackLayout Orientation="Horizontal"
                    Padding="5">
        <Entry Placeholder="Enter recipe search term..."
            VerticalOptions="StartAndExpand"
            HorizontalOptions="CenterAndExpand"
            Text="{Binding SearchTerm}"/>
        <Button Text="Search"
            Command="{Binding SearchRecipeCommand}"/>
    </StackLayout>
    <CollectionView ItemsSource="{Binding Recipes}"
                    Margin="5"
                    SelectionMode="Single">
        <CollectionView.ItemTemplate>
            <DataTemplate>
                <Frame HasShadow="True"
                        Margin="10"
                        Padding="10"
                        BorderColor="{StaticResource BorderColour}">
                    <StackLayout>
                        <Label Text="{Binding Name}"
                            FontAttributes="Bold"/>
                        <Label Text="{Binding Style}"/>
                    </StackLayout>
                </Frame>
            </DataTemplate>
        </CollectionView.ItemTemplate>
    </CollectionView>

</StackLayout>

- Code behind

public RecipesViewModel viewModel  {get; set; }

- Constructor  

viewModel = new RecipesViewModel();
viewModel.Navigation = Navigation;
BindingContext = viewModel;

TAB: Recipe Details View Model

- Props

private RecipeDto _recipe;

public string Name { get; set; }
public string Style { get; set; }
public ObservableCollection<RecipeIngredientDto> Ingredients { get; set; } = new ObservableCollection<RecipeIngredientDto>();
public string MassUnit { get; set; }
public string LiquidUnit { get; set; }
public string TempUnit { get; set; }
public string Notes { get; set; }

private readonly RecipesService _service;

- Initialise

private async Task Init(int id)
{
    _recipe = await _service.GetAsync(id);
    Name = _recipe.Name;
    Style = _recipe.Style;
    MassUnit = _recipe.MassUnits.ToString();
    LiquidUnit = _recipe.LiquidUnits.ToString();
    TempUnit = _recipe.TemperatureUnits.ToString();
    Notes = _recipe.Notes.ToString();
    _recipe.Ingredients.ForEach(i => Ingredients.Add(i));
}

- Constructor

public RecipeDetailsViewModel(int recipeId)
{
    _service = new RecipesService();
    _ = Init(recipeId);
}

TAB: RecipeDetailsPage

- Page Content
<StackLayout VerticalOptions="StartAndExpand"
                Padding="20">
    <Label Text="{Binding Name}"
            FontAttributes="Bold"
            FontSize="Title"
        VerticalOptions="Start" 
        HorizontalOptions="CenterAndExpand" />
    <StackLayout>
        <Label Text="Style:"
                FontAttributes="Bold"/>
        <Label Text="{Binding Style}"/>
    </StackLayout>
    <StackLayout>
        <Label FontAttributes="Bold"
                Text="Notes:"/>
        <Label Text="{Binding Notes}"/>
    </StackLayout>
    <Label Text="Ingredients:"
            FontAttributes="Bold"/>
    <CollectionView ItemsSource="{Binding Ingredients}">
        <CollectionView.ItemTemplate>
            <DataTemplate>
                <Frame HasShadow="True">
                    <Grid ColumnDefinitions="3*, 2*">
                        <Label Text="{Binding IngredientName}"
                                    Grid.Column="0"/>
                        <StackLayout Orientation="Horizontal"
                                        Grid.Column="1">
                            <Label Text="{Binding Quantity}"/>
                            <Label Text="{Binding MassUnit}"/>
                        </StackLayout>
                    </Grid>
                </Frame>
            </DataTemplate>
        </CollectionView.ItemTemplate>
    </CollectionView>
</StackLayout>

- Code behind: viewModel

RecipeDetailsViewModel viewModel { get; set; }

- Code behind: Constructor

viewModel = new RecipeDetailsViewModel(RecipeId);
BindingContext = viewModel

TAB: RecipesViewModel

- Command

public ICommand OpenRecipeDetailsCommand { get; set; }

- Method

public async Task ShowRecipeDetails()
{
    if (SelectedRecipe != null && SelectedRecipe.Id > 0)
    {
        try
        {
            await Navigation.PushAsync(new RecipeDetailsPage(SelectedRecipe.Id));
        }
        catch (Exception ex)
        {
            Debug.WriteLine(ex.Message);
            Debug.WriteLine(ex.StackTrace);
        }
    }
}

- Constructor

OpenRecipeDetailsCommand = new Command(async () => await ShowRecipeDetails());

TAB: Recipes Page

- CollectionView

SelectionChangedCommand="{Binding OpenRecipeDetailsCommand}"
SelectedItem="{Binding SelectedRecipe, Mode=TwoWay}"

TAB: New Recipes View Model

- Props

public RecipeDto Recipe { get; set; } = new RecipeDto();
public ICommand SaveCommand { get; set; }
public ICommand CancelCommand { get; set; }
private RecipesService service { get; set; }

- Method

public async Task SaveRecipe()
{
    int id = await service.CreateAsync(Recipe);
    MessagingCenter.Send<object, int>(this, "RecipeAdded", id);
}

- Constructor

public NewRecipeViewModel()
{
    service = new RecipesService();
    SaveCommand = new Command(async () => await SaveRecipe());
    CancelCommand = new Command(async () => await Navigation.PopAsync());
}

TAB: New Recipe Page

- Page Content

 <StackLayout Spacing="20" Padding="15">
    <Label Text="Name" FontSize="Medium" />
    <Entry Text="{Binding Recipe.Name}" d:Text="Recipe name" FontSize="Small" />
    <Label Text="Style" FontSize="Medium" />
    <Editor Text="{Binding Recipe.Style}" d:Text="Recipe style" FontSize="Small" Margin="0" />
    <Label Text="Notes" FontSize="Medium" />
    <Editor Text="{Binding Recipe.Notes}" d:Text="Recipe notes" FontSize="Small" Margin="0" />
    <StackLayout Orientation="Horizontal"
                    HorizontalOptions="FillAndExpand">
        <Label Text="Ingredients"
                FontSize="Medium"
                HorizontalOptions="StartAndExpand"
                VerticalOptions="Center"/>
        <Button Text="Add"
                HorizontalOptions="EndAndExpand"
                VerticalOptions="Center"
                Command="{Binding AddIngredientCommand}"/>
    </StackLayout>
</StackLayout>

- Code Behind: viewModel

public NewRecipeViewModel viewModel { get; set; }

- Code Behind: Constructor

viewModel = new NewRecipeViewModel();
viewModel.Navigation = Navigation;
BindingContext = viewModel;

TAB: RecipesViewModel

- Command

public ICommand AddNewRecipeCommand { get; set; }

- Constructor

AddNewRecipeCommand = new Command(async () => await Navigation.PushAsync(new NewRecipePage()));
MessagingCenter.Subscribe<object, int>(this, "RecipeAdded", async (obj, id) => await Navigation.PushAsync(new RecipeDetailsPage(id)));

TAB: Recipes Page

- Add button

<Button Text="Add new recipe"
        Margin="30,0,30,0"
        Command="{Binding AddNewRecipeCommand}"/>