# Demo Snippets for Xamarin Hack Day 2020

TAB: 1. FodyWeavers.xml

- Step 1 - PropertyChanged config

<?xml version="1.0" encoding="utf-8"?>
<Weavers xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="FodyWeavers.xsd">
  <PropertyChanged />
</Weavers> 

TAB: 2. Constants

- Step 1 - Initialise

private string _apiUri;
public string ApiUri
{
    get
    {
        return _apiUri;
    }
}

- Step 2 - Constructor

public Constants()
{
    _apiUri = ""// TODO: Paste ngrok url
}

TAB: 3. App

- Step 1 - Add Constants

public static Constants Constants { get; set; }

- Step 2 - Initialise

Constants = new Constants();

TAB: 6. Base Service

- Step 1 - Props

public static HttpClient httpClient { get; set; }
public static string apiUri;

- Step 2 - Constructor

public BaseService()
{
    httpClient = new HttpClient();
    apiUri = App.Constants.ApiUri;
}

TAB: 7. Recipes Service

- Step 1 - Recipes Service

private readonly RecipesClient _service;

public RecipesService()
{
    _service = new RecipesClient(apiUri, httpClient);
}

- Step 2 - Get Method

public async Task<RecipeDto> GetAsync(int id)
{
    return await _service.GetAsync(id);
}

- Step 3 - Search

public async Task<ICollection<RecipeDto>> SearchAsync(string searchterm)
{
    ICollection<RecipeDto> recipes = new ObservableCollection<RecipeDto>();

    SearchRecipeQuery query = new SearchRecipeQuery();
    query.Name = searchterm;
    var vm = await _service.SearchAsync(query);

    vm.Recipes.ForEach(r =>
    {
        recipes.Add(r);
    });

    return recipes;
}

- Step 4 - Create

public async Task<int> CreateAsync(RecipeDto recipe)
{
    return await client.CreateAsync(recipe);
}

TAB: 8. Base View Model

- Step 1 - Add Navigation

public INavigation Navigation { get; set; }

TAB: 9. Recipes View Model

- Step 1 - Recipes Service

private readonly RecipesService service;

- Step 2 - Constructor  

public RecipesViewModel()
{
    Service = new RecipesService();
}

- Step 3 - Props

public string SearchTerm { get; set; }

public RecipeDto SelectedRecipe { get; set; } = new RecipeDto();

public ICollection<RecipeDto> Recipes { get; set; } = new ObservableCollection<RecipeDto>();

public ICommand SearchRecipeCommand { get; set; }
public ICommand OpenRecipeDetailsCommand { get; set; }

- Step 4 - Methods

public async Task SearchRecipes()
{
    Recipes.Clear();
    Recipes = await client.SearchAsync(SearchTerm);
}

- Step 5 - Initialise

SearchRecipeCommand = new Command(async () => await SearchRecipes());

TAB: 11. Recipes Page

- Step 1 - View Model

public RecipesViewModel viewModel  {get; set; }

- Step 2 - Constructor  

viewModel = new RecipesViewModel();
viewModel.Navigation = Navigation;
BindingContext = viewModel;

TAB: 12. Recipe Details View Model

- Step 1 - Props

private RecipeDto _recipe;

public string Name { get; set; }
public string Style { get; set; }
public ObservableCollection<RecipeIngredientDto> Ingredients { get; set; } = new ObservableCollection<RecipeIngredientDto>();
public string MassUnit { get; set; }
public string LiquidUnit { get; set; }
public string TempUnit { get; set; }
public string Notes { get; set; }

private readonly RecipesService _service;

- Step 2 - Initialise

private async Task Init(int id)
{
    _recipe = await _service.GetAsync(id);
    Name = _recipe.Name;
    Style = _recipe.Style;
    MassUnit = _recipe.MassUnits.ToString();
    LiquidUnit = _recipe.LiquidUnits.ToString();
    TempUnit = _recipe.TemperatureUnits.ToString();
    Notes = _recipe.Notes.ToString();
    _recipe.Ingredients.ForEach(i => Ingredients.Add(i));
}

- Step 3 - Constructor

public RecipeDetailsViewModel(int recipeId)
{
    _service = new RecipesService();
    _ = Init(recipeId);
}

TAB: 14. RecipeDetailsPage

- Step 1 - ViewModel

RecipeDetailsViewModel viewModel { get; set; }

- Step 2 - Constructor

viewModel = new RecipeDetailsViewModel(RecipeId);
BindingContext = viewModel

TAB: 15. RecipesViewModel

- Step 1 - Add open details Command

public ICommand OpenRecipeDetailsCommand { get; set; }

- Step 2 - Add show details Method

public async Task ShowRecipeDetails()
{
    if (SelectedRecipe != null && SelectedRecipe.Id > 0)
    {
        try
        {
            await Navigation.PushAsync(new RecipeDetailsPage(SelectedRecipe.Id));
        }
        catch (Exception ex)
        {
            Debug.WriteLine(ex.Message);
            Debug.WriteLine(ex.StackTrace);
        }
    }
}

- Step 3 - link in Constructor

OpenRecipeDetailsCommand = new Command(async () => await ShowRecipeDetails());

TAB: 17. New Recipes View Model

- Step 1 - Props

public RecipeDto Recipe { get; set; } = new RecipeDto();
public ICommand SaveCommand { get; set; }
public ICommand CancelCommand { get; set; }
private RecipesService service { get; set; }

- Step 2 - Method

public async Task SaveRecipe()
{
    int id = await service.CreateAsync(Recipe);
    MessagingCenter.Send<object, int>(this, "RecipeAdded", id);
}

- Step 3 - Constructor

public NewRecipeViewModel()
{
    service = new RecipesService();
    SaveCommand = new Command(async () => await SaveRecipe());
    CancelCommand = new Command(async () => await Navigation.PopAsync());
}

TAB: 19. New Recipe Page

- Step 1 - ViewModel

public NewRecipeViewModel viewModel { get; set; }

- Step 2 - Constructor

viewModel = new NewRecipeViewModel();
viewModel.Navigation = Navigation;
BindingContext = viewModel;

TAB: 20. RecipesViewModel

- Step 1- Command

public ICommand AddNewRecipeCommand { get; set; }

- Step 2 - Constructor

AddNewRecipeCommand = new Command(async () => await Navigation.PushAsync(new NewRecipePage()));
MessagingCenter.Subscribe<object, int>(this, "RecipeAdded", async (obj, id) => await Navigation.PushAsync(new RecipeDetailsPage(id)));